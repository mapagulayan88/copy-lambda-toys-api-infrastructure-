{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1124.51302",
      "templateHash": "7009509682747489413"
    }
  },
  "parameters": {
    "location": {
      "type": "string"
    },
    "prefix": {
      "type": "string"
    },
    "vnetSettings": {
      "type": "object",
      "defaultValue": {
        "addressPrefixes": [
          "10.0.0.0/19"
        ],
        "subnets": [
          {
            "name": "subnet1",
            "addressPrefix": "10.0.0.0/21"
          },
          {
            "name": "acaAppSubnet",
            "addressPrefix": "10.0.8.0/21"
          },
          {
            "name": "acaControlPlaneSubnet",
            "addressPrefix": "10.0.16.0/21"
          }
        ]
      }
    },
    "containerVersion": {
      "type": "string"
    },
    "tier": {
      "type": "string",
      "defaultValue": "Consumption"
    },
    "capacity": {
      "type": "int",
      "defaultValue": 0
    },
    "externalResourcesRg": {
      "type": "string"
    },
    "certKeyVaultName": {
      "type": "string"
    },
    "certKeyVaultUrl": {
      "type": "string"
    },
    "containerRegistryName": {
      "type": "string"
    },
    "containerRegistryUsername": {
      "type": "string"
    },
    "containerRegistryPassword": {
      "type": "secureString"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "core",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[parameters('prefix')]"
          },
          "vnetSettings": {
            "value": "[parameters('vnetSettings')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "8677083504682978332"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "vnetSettings": {
              "type": "object",
              "defaultValue": {
                "addressPrefixes": [
                  "10.0.0.0/19"
                ],
                "subnets": [
                  {
                    "name": "subnet1",
                    "addressPrefix": "10.0.0.0/21"
                  },
                  {
                    "name": "acaAppSubnet",
                    "addressPrefix": "10.0.8.0/21"
                  },
                  {
                    "name": "acaControlPlaneSubnet",
                    "addressPrefix": "10.0.16.0/21"
                  }
                ]
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}-default-nsg', parameters('prefix'))]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "allowhttpsinbound",
                    "properties": {
                      "direction": "Inbound",
                      "access": "Allow",
                      "protocol": "Tcp",
                      "description": "Allow https traffic into API",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "destinationAddressPrefix": "*",
                      "priority": 200
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}-vnet', parameters('prefix'))]",
              "location": "[parameters('location')]",
              "properties": {
                "copy": [
                  {
                    "name": "subnets",
                    "count": "[length(parameters('vnetSettings').subnets)]",
                    "input": {
                      "name": "[parameters('vnetSettings').subnets[copyIndex('subnets')].name]",
                      "properties": {
                        "addressPrefix": "[parameters('vnetSettings').subnets[copyIndex('subnets')].addressPrefix]",
                        "networkSecurityGroup": {
                          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-default-nsg', parameters('prefix')))]"
                        },
                        "privateEndpointNetworkPolicies": "disabled"
                      }
                    }
                  }
                ],
                "addressSpace": {
                  "addressPrefixes": "[parameters('vnetSettings').addressPrefixes]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-default-nsg', parameters('prefix')))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2021-03-15",
              "name": "[format('{0}-cosmos-account', parameters('prefix'))]",
              "location": "[parameters('location')]",
              "kind": "GlobalDocumentDB",
              "properties": {
                "consistencyPolicy": {
                  "defaultConsistencyLevel": "Session"
                },
                "locations": [
                  {
                    "locationName": "[parameters('location')]",
                    "failoverPriority": 0
                  }
                ],
                "databaseAccountOfferType": "Standard",
                "enableAutomaticFailover": false,
                "capabilities": [
                  {
                    "name": "EnableServerless"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2021-06-15",
              "name": "[format('{0}/{1}', format('{0}-cosmos-account', parameters('prefix')), format('{0}-sqldb', parameters('prefix')))]",
              "properties": {
                "resource": {
                  "id": "[format('{0}-sqldb', parameters('prefix'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', format('{0}-cosmos-account', parameters('prefix')))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2021-06-15",
              "name": "[format('{0}/{1}/{2}', format('{0}-cosmos-account', parameters('prefix')), format('{0}-sqldb', parameters('prefix')), format('{0}-orders', parameters('prefix')))]",
              "properties": {
                "resource": {
                  "id": "[format('{0}-orders', parameters('prefix'))]",
                  "partitionKey": {
                    "paths": [
                      "/id"
                    ]
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', format('{0}-cosmos-account', parameters('prefix')))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', format('{0}-cosmos-account', parameters('prefix')), format('{0}-sqldb', parameters('prefix')))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2021-06-15",
              "name": "[format('{0}/{1}/{2}', format('{0}-cosmos-account', parameters('prefix')), format('{0}-sqldb', parameters('prefix')), format('{0}-state', parameters('prefix')))]",
              "properties": {
                "resource": {
                  "id": "[format('{0}-state', parameters('prefix'))]",
                  "partitionKey": {
                    "paths": [
                      "/partitionKey"
                    ]
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', format('{0}-cosmos-account', parameters('prefix')))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', format('{0}-cosmos-account', parameters('prefix')), format('{0}-sqldb', parameters('prefix')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "privatelink.documents.azure.com",
              "location": "global"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', 'privatelink.documents.azure.com', format('{0}-cosmos-dns-link', parameters('prefix')))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vnet', parameters('prefix')))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.documents.azure.com')]",
                "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vnet', parameters('prefix')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}-cosmos-pe', parameters('prefix'))]",
              "location": "[parameters('location')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-cosmos-pe', parameters('prefix'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.DocumentDB/databaseAccounts', format('{0}-cosmos-account', parameters('prefix')))]",
                      "groupIds": [
                        "SQL"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('{0}-vnet', parameters('prefix')))).subnets[0].id]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', format('{0}-cosmos-account', parameters('prefix')))]",
                "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vnet', parameters('prefix')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-03-01",
              "name": "[format('{0}/{1}', format('{0}-cosmos-pe', parameters('prefix')), format('{0}-cosmos-pe-dns', parameters('prefix')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "privatelink.documents.azure.com",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.documents.azure.com')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.documents.azure.com')]",
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-cosmos-pe', parameters('prefix')))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-10-01",
              "name": "[format('{0}-kv', parameters('prefix'))]",
              "location": "[parameters('location')]",
              "properties": {
                "enabledForDeployment": true,
                "enabledForTemplateDeployment": true,
                "enabledForDiskEncryption": true,
                "enableRbacAuthorization": true,
                "tenantId": "[tenant().tenantId]",
                "sku": {
                  "name": "standard",
                  "family": "A"
                }
              }
            }
          ],
          "outputs": {
            "vNetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vnet', parameters('prefix')))]"
            },
            "SecretKeyVaultName": {
              "type": "string",
              "value": "[format('{0}-kv', parameters('prefix'))]"
            },
            "CosmosAccountName": {
              "type": "string",
              "value": "[format('{0}-cosmos-account', parameters('prefix'))]"
            },
            "ComosDbName": {
              "type": "string",
              "value": "[format('{0}-sqldb', parameters('prefix'))]"
            },
            "CosmosStateContainerName": {
              "type": "string",
              "value": "[format('{0}-state', parameters('prefix'))]"
            },
            "CosmosSqlContainerName": {
              "type": "string",
              "value": "[format('{0}-orders', parameters('prefix'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "aca",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[parameters('prefix')]"
          },
          "vNetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'core'), '2020-10-01').outputs.vNetId.value]"
          },
          "containerRegistryName": {
            "value": "[parameters('containerRegistryName')]"
          },
          "containerRegistryUsername": {
            "value": "[parameters('containerRegistryUsername')]"
          },
          "containerVersion": {
            "value": "[parameters('containerVersion')]"
          },
          "cosmosAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'core'), '2020-10-01').outputs.CosmosAccountName.value]"
          },
          "cosmosContainerName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'core'), '2020-10-01').outputs.CosmosStateContainerName.value]"
          },
          "cosmosDbName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'core'), '2020-10-01').outputs.ComosDbName.value]"
          },
          "containerRegistryPassword": {
            "value": "[parameters('containerRegistryPassword')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "2050532190533906973"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "vNetId": {
              "type": "string"
            },
            "containerRegistryName": {
              "type": "string"
            },
            "containerRegistryUsername": {
              "type": "string"
            },
            "containerRegistryPassword": {
              "type": "secureString"
            },
            "containerVersion": {
              "type": "string"
            },
            "cosmosAccountName": {
              "type": "string"
            },
            "cosmosDbName": {
              "type": "string"
            },
            "cosmosContainerName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/managedEnvironments/daprComponents",
              "apiVersion": "2022-01-01-preview",
              "name": "[format('{0}/{1}', format('{0}-container-env', parameters('prefix')), 'statestore')]",
              "properties": {
                "componentType": "state.azure.cosmosdb",
                "version": "v1",
                "scopes": [
                  "lambdaapi"
                ],
                "metadata": [
                  {
                    "name": "url",
                    "value": "[format('https://{0}.documents.azure.com:443/', parameters('cosmosAccountName'))]"
                  },
                  {
                    "name": "database",
                    "value": "[parameters('cosmosDbName')]"
                  },
                  {
                    "name": "collection",
                    "value": "[parameters('cosmosContainerName')]"
                  },
                  {
                    "name": "masterKey",
                    "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosAccountName')), '2021-03-15').primaryMasterKey]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.App/managedEnvironments', format('{0}-container-env', parameters('prefix')))]"
              ]
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-la-workspace', parameters('prefix'))]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "name": "Standard"
                }
              }
            },
            {
              "type": "Microsoft.App/managedEnvironments",
              "apiVersion": "2022-01-01-preview",
              "name": "[format('{0}-container-env', parameters('prefix'))]",
              "location": "[parameters('location')]",
              "properties": {
                "appLogsConfiguration": {
                  "destination": "log-analytics",
                  "logAnalyticsConfiguration": {
                    "customerId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}-la-workspace', parameters('prefix')))).customerId]",
                    "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}-la-workspace', parameters('prefix'))), '2020-10-01').primarySharedKey]"
                  }
                },
                "vnetConfiguration": {
                  "runtimeSubnetId": "[format('{0}/subnets/acaAppSubnet', parameters('vNetId'))]",
                  "infrastructureSubnetId": "[format('{0}/subnets/acaControlPlaneSubnet', parameters('vNetId'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}-la-workspace', parameters('prefix')))]"
              ]
            },
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2022-01-01-preview",
              "name": "[format('{0}-api-container', parameters('prefix'))]",
              "location": "[parameters('location')]",
              "properties": {
                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', format('{0}-container-env', parameters('prefix')))]",
                "configuration": {
                  "secrets": [
                    {
                      "name": "container-registry-password",
                      "value": "[parameters('containerRegistryPassword')]"
                    }
                  ],
                  "registries": [
                    {
                      "server": "[format('{0}.azurecr.io', parameters('containerRegistryName'))]",
                      "username": "[parameters('containerRegistryUsername')]",
                      "passwordSecretRef": "container-registry-password"
                    }
                  ],
                  "ingress": {
                    "external": true,
                    "targetPort": 3000
                  },
                  "dapr": {
                    "enabled": true,
                    "appPort": 3000,
                    "appId": "lambdaapi"
                  }
                },
                "template": {
                  "containers": [
                    {
                      "image": "[format('{0}.azurecr.io/hello-k8s-node:{1}', parameters('containerRegistryName'), parameters('containerVersion'))]",
                      "name": "lambdaapi",
                      "resources": {
                        "cpu": "0.5",
                        "memory": "1Gi"
                      }
                    }
                  ],
                  "scale": {
                    "minReplicas": 1
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.App/managedEnvironments', format('{0}-container-env', parameters('prefix')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'core')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "apim",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[parameters('prefix')]"
          },
          "certKeyVaultName": {
            "value": "[parameters('certKeyVaultName')]"
          },
          "certKeyVaultUrl": {
            "value": "[parameters('certKeyVaultUrl')]"
          },
          "externalResourcesRg": {
            "value": "[parameters('externalResourcesRg')]"
          },
          "capacity": {
            "value": "[parameters('capacity')]"
          },
          "tier": {
            "value": "[parameters('tier')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "2308678248572876663"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "tier": {
              "type": "string",
              "defaultValue": "Consumption"
            },
            "capacity": {
              "type": "int",
              "defaultValue": 0
            },
            "externalResourcesRg": {
              "type": "string"
            },
            "certKeyVaultName": {
              "type": "string"
            },
            "certKeyVaultUrl": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[format('{0}-apim0-mi', parameters('prefix'))]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.ApiManagement/service",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}-apim', parameters('prefix'))]",
              "location": "[parameters('location')]",
              "sku": {
                "capacity": "[parameters('capacity')]",
                "name": "[parameters('tier')]"
              },
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-apim0-mi', parameters('prefix'))))]": {}
                }
              },
              "properties": {
                "virtualNetworkType": "None",
                "publisherEmail": "support@lambdatoys.com",
                "publisherName": "Lambda Toys",
                "hostnameConfigurations": [
                  {
                    "hostName": "[format('{0}-apim.lambdatoys.com', parameters('prefix'))]",
                    "type": "Proxy",
                    "certificateSource": "KeyVault",
                    "keyVaultId": "[parameters('certKeyVaultUrl')]",
                    "identityClientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-apim0-mi', parameters('prefix')))).clientId]"
                  }
                ]
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('externalResourcesRg')), 'Microsoft.Resources/deployments', format('{0}-apim-external', parameters('prefix')))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-apim0-mi', parameters('prefix')))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/apis",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/LambdaStore', format('{0}-apim', parameters('prefix')))]",
              "properties": {
                "format": "swagger-json",
                "value": "{\r\n    \"swagger\": \"2.0\",\r\n    \"info\": {\r\n        \"description\": \"This is a sample server LambdaStore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\",\r\n        \"version\": \"1.0.6\",\r\n        \"title\": \"Swagger LambdaStore\",\r\n        \"termsOfService\": \"http://swagger.io/terms/\",\r\n        \"contact\": {\r\n            \"email\": \"admin@lambdatoys.com\"\r\n        },\r\n        \"license\": {\r\n            \"name\": \"Apache 2.0\",\r\n            \"url\": \"http://www.apache.org/licenses/LICENSE-2.0.html\"\r\n        }\r\n    },\r\n    \"host\": \"LambdaStore.swagger.io\",\r\n    \"basePath\": \"/v2\",\r\n    \"tags\": [\r\n        {\r\n            \"name\": \"toy\",\r\n            \"description\": \"Everything about your toys\",\r\n            \"externalDocs\": {\r\n                \"description\": \"Find out more\",\r\n                \"url\": \"http://swagger.io\"\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"store\",\r\n            \"description\": \"Access to LambdaStore orders\"\r\n        },\r\n        {\r\n            \"name\": \"user\",\r\n            \"description\": \"Operations about user\",\r\n            \"externalDocs\": {\r\n                \"description\": \"Find out more about our store\",\r\n                \"url\": \"http://swagger.io\"\r\n            }\r\n        }\r\n    ],\r\n    \"schemes\": [\r\n        \"https\",\r\n        \"http\"\r\n    ],\r\n    \"paths\": {\r\n        \"/toy/{toyId}/uploadImage\": {\r\n            \"post\": {\r\n                \"tags\": [\r\n                    \"toy\"\r\n                ],\r\n                \"summary\": \"uploads an image\",\r\n                \"description\": \"\",\r\n                \"operationId\": \"uploadFile\",\r\n                \"consumes\": [\r\n                    \"multipart/form-data\"\r\n                ],\r\n                \"produces\": [\r\n                    \"application/json\"\r\n                ],\r\n                \"parameters\": [\r\n                    {\r\n                        \"name\": \"toyId\",\r\n                        \"in\": \"path\",\r\n                        \"description\": \"ID of toy to update\",\r\n                        \"required\": true,\r\n                        \"type\": \"integer\",\r\n                        \"format\": \"int64\"\r\n                    },\r\n                    {\r\n                        \"name\": \"additionalMetadata\",\r\n                        \"in\": \"formData\",\r\n                        \"description\": \"Additional data to pass to server\",\r\n                        \"required\": false,\r\n                        \"type\": \"string\"\r\n                    },\r\n                    {\r\n                        \"name\": \"file\",\r\n                        \"in\": \"formData\",\r\n                        \"description\": \"file to upload\",\r\n                        \"required\": false,\r\n                        \"type\": \"file\"\r\n                    }\r\n                ],\r\n                \"responses\": {\r\n                    \"200\": {\r\n                        \"description\": \"successful operation\",\r\n                        \"schema\": {\r\n                            \"$ref\": \"#/definitions/ApiResponse\"\r\n                        }\r\n                    }\r\n                },\r\n                \"security\": [\r\n                    {\r\n                        \"LambdaStore_auth\": [\r\n                            \"write:toys\",\r\n                            \"read:toys\"\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        \"/toy\": {\r\n            \"post\": {\r\n                \"tags\": [\r\n                    \"toy\"\r\n                ],\r\n                \"summary\": \"Add a new toy to the store\",\r\n                \"description\": \"\",\r\n                \"operationId\": \"addtoy\",\r\n                \"consumes\": [\r\n                    \"application/json\",\r\n                    \"application/xml\"\r\n                ],\r\n                \"produces\": [\r\n                    \"application/json\",\r\n                    \"application/xml\"\r\n                ],\r\n                \"parameters\": [\r\n                    {\r\n                        \"in\": \"body\",\r\n                        \"name\": \"body\",\r\n                        \"description\": \"toy object that needs to be added to the store\",\r\n                        \"required\": true,\r\n                        \"schema\": {\r\n                            \"$ref\": \"#/definitions/toy\"\r\n                        }\r\n                    }\r\n                ],\r\n                \"responses\": {\r\n                    \"405\": {\r\n                        \"description\": \"Invalid input\"\r\n                    }\r\n                },\r\n                \"security\": [\r\n                    {\r\n                        \"LambdaStore_auth\": [\r\n                            \"write:toys\",\r\n                            \"read:toys\"\r\n                        ]\r\n                    }\r\n                ]\r\n            },\r\n            \"put\": {\r\n                \"tags\": [\r\n                    \"toy\"\r\n                ],\r\n                \"summary\": \"Update an existing toy\",\r\n                \"description\": \"\",\r\n                \"operationId\": \"updatetoy\",\r\n                \"consumes\": [\r\n                    \"application/json\",\r\n                    \"application/xml\"\r\n                ],\r\n                \"produces\": [\r\n                    \"application/json\",\r\n                    \"application/xml\"\r\n                ],\r\n                \"parameters\": [\r\n                    {\r\n                        \"in\": \"body\",\r\n                        \"name\": \"body\",\r\n                        \"description\": \"toy object that needs to be added to the store\",\r\n                        \"required\": true,\r\n                        \"schema\": {\r\n                            \"$ref\": \"#/definitions/toy\"\r\n                        }\r\n                    }\r\n                ],\r\n                \"responses\": {\r\n                    \"400\": {\r\n                        \"description\": \"Invalid ID supplied\"\r\n                    },\r\n                    \"404\": {\r\n                        \"description\": \"toy not found\"\r\n                    },\r\n                    \"405\": {\r\n                        \"description\": \"Validation exception\"\r\n                    }\r\n                },\r\n                \"security\": [\r\n                    {\r\n                        \"LambdaStore_auth\": [\r\n                            \"write:toys\",\r\n                            \"read:toys\"\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        \"/toy/findByStatus\": {\r\n            \"get\": {\r\n                \"tags\": [\r\n                    \"toy\"\r\n                ],\r\n                \"summary\": \"Finds toys by status\",\r\n                \"description\": \"Multiple status values can be provided with comma separated strings\",\r\n                \"operationId\": \"findtoysByStatus\",\r\n                \"produces\": [\r\n                    \"application/json\",\r\n                    \"application/xml\"\r\n                ],\r\n                \"parameters\": [\r\n                    {\r\n                        \"name\": \"status\",\r\n                        \"in\": \"query\",\r\n                        \"description\": \"Status values that need to be considered for filter\",\r\n                        \"required\": true,\r\n                        \"type\": \"array\",\r\n                        \"items\": {\r\n                            \"type\": \"string\",\r\n                            \"enum\": [\r\n                                \"available\",\r\n                                \"pending\",\r\n                                \"sold\"\r\n                            ],\r\n                            \"default\": \"available\"\r\n                        },\r\n                        \"collectionFormat\": \"multi\"\r\n                    }\r\n                ],\r\n                \"responses\": {\r\n                    \"200\": {\r\n                        \"description\": \"successful operation\",\r\n                        \"schema\": {\r\n                            \"type\": \"array\",\r\n                            \"items\": {\r\n                                \"$ref\": \"#/definitions/toy\"\r\n                            }\r\n                        }\r\n                    },\r\n                    \"400\": {\r\n                        \"description\": \"Invalid status value\"\r\n                    }\r\n                },\r\n                \"security\": [\r\n                    {\r\n                        \"LambdaStore_auth\": [\r\n                            \"write:toys\",\r\n                            \"read:toys\"\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        \"/toy/findByTags\": {\r\n            \"get\": {\r\n                \"tags\": [\r\n                    \"toy\"\r\n                ],\r\n                \"summary\": \"Finds toys by tags\",\r\n                \"description\": \"Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\",\r\n                \"operationId\": \"findtoysByTags\",\r\n                \"produces\": [\r\n                    \"application/json\",\r\n                    \"application/xml\"\r\n                ],\r\n                \"parameters\": [\r\n                    {\r\n                        \"name\": \"tags\",\r\n                        \"in\": \"query\",\r\n                        \"description\": \"Tags to filter by\",\r\n                        \"required\": true,\r\n                        \"type\": \"array\",\r\n                        \"items\": {\r\n                            \"type\": \"string\"\r\n                        },\r\n                        \"collectionFormat\": \"multi\"\r\n                    }\r\n                ],\r\n                \"responses\": {\r\n                    \"200\": {\r\n                        \"description\": \"successful operation\",\r\n                        \"schema\": {\r\n                            \"type\": \"array\",\r\n                            \"items\": {\r\n                                \"$ref\": \"#/definitions/toy\"\r\n                            }\r\n                        }\r\n                    },\r\n                    \"400\": {\r\n                        \"description\": \"Invalid tag value\"\r\n                    }\r\n                },\r\n                \"security\": [\r\n                    {\r\n                        \"LambdaStore_auth\": [\r\n                            \"write:toys\",\r\n                            \"read:toys\"\r\n                        ]\r\n                    }\r\n                ],\r\n                \"deprecated\": true\r\n            }\r\n        },\r\n        \"/toy/{toyId}\": {\r\n            \"get\": {\r\n                \"tags\": [\r\n                    \"toy\"\r\n                ],\r\n                \"summary\": \"Find toy by ID\",\r\n                \"description\": \"Returns a single toy\",\r\n                \"operationId\": \"gettoyById\",\r\n                \"produces\": [\r\n                    \"application/json\",\r\n                    \"application/xml\"\r\n                ],\r\n                \"parameters\": [\r\n                    {\r\n                        \"name\": \"toyId\",\r\n                        \"in\": \"path\",\r\n                        \"description\": \"ID of toy to return\",\r\n                        \"required\": true,\r\n                        \"type\": \"integer\",\r\n                        \"format\": \"int64\"\r\n                    }\r\n                ],\r\n                \"responses\": {\r\n                    \"200\": {\r\n                        \"description\": \"successful operation\",\r\n                        \"schema\": {\r\n                            \"$ref\": \"#/definitions/toy\"\r\n                        }\r\n                    },\r\n                    \"400\": {\r\n                        \"description\": \"Invalid ID supplied\"\r\n                    },\r\n                    \"404\": {\r\n                        \"description\": \"toy not found\"\r\n                    }\r\n                }\r\n           \r\n            },\r\n            \"post\": {\r\n                \"tags\": [\r\n                    \"toy\"\r\n                ],\r\n                \"summary\": \"Updates a toy in the store with form data\",\r\n                \"description\": \"\",\r\n                \"operationId\": \"updatetoyWithForm\",\r\n                \"consumes\": [\r\n                    \"application/x-www-form-urlencoded\"\r\n                ],\r\n                \"produces\": [\r\n                    \"application/json\",\r\n                    \"application/xml\"\r\n                ],\r\n                \"parameters\": [\r\n                    {\r\n                        \"name\": \"toyId\",\r\n                        \"in\": \"path\",\r\n                        \"description\": \"ID of toy that needs to be updated\",\r\n                        \"required\": true,\r\n                        \"type\": \"integer\",\r\n                        \"format\": \"int64\"\r\n                    },\r\n                    {\r\n                        \"name\": \"name\",\r\n                        \"in\": \"formData\",\r\n                        \"description\": \"Updated name of the toy\",\r\n                        \"required\": false,\r\n                        \"type\": \"string\"\r\n                    },\r\n                    {\r\n                        \"name\": \"status\",\r\n                        \"in\": \"formData\",\r\n                        \"description\": \"Updated status of the toy\",\r\n                        \"required\": false,\r\n                        \"type\": \"string\"\r\n                    }\r\n                ],\r\n                \"responses\": {\r\n                    \"405\": {\r\n                        \"description\": \"Invalid input\"\r\n                    }\r\n                },\r\n                \"security\": [\r\n                    {\r\n                        \"LambdaStore_auth\": [\r\n                            \"write:toys\",\r\n                            \"read:toys\"\r\n                        ]\r\n                    }\r\n                ]\r\n            },\r\n            \"delete\": {\r\n                \"tags\": [\r\n                    \"toy\"\r\n                ],\r\n                \"summary\": \"Deletes a toy\",\r\n                \"description\": \"\",\r\n                \"operationId\": \"deletetoy\",\r\n                \"produces\": [\r\n                    \"application/json\",\r\n                    \"application/xml\"\r\n                ],\r\n                \"parameters\": [\r\n                    {\r\n                        \"name\": \"api_key\",\r\n                        \"in\": \"header\",\r\n                        \"required\": false,\r\n                        \"type\": \"string\"\r\n                    },\r\n                    {\r\n                        \"name\": \"toyId\",\r\n                        \"in\": \"path\",\r\n                        \"description\": \"toy id to delete\",\r\n                        \"required\": true,\r\n                        \"type\": \"integer\",\r\n                        \"format\": \"int64\"\r\n                    }\r\n                ],\r\n                \"responses\": {\r\n                    \"400\": {\r\n                        \"description\": \"Invalid ID supplied\"\r\n                    },\r\n                    \"404\": {\r\n                        \"description\": \"toy not found\"\r\n                    }\r\n                },\r\n                \"security\": [\r\n                    {\r\n                        \"LambdaStore_auth\": [\r\n                            \"write:toys\",\r\n                            \"read:toys\"\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        \"/store/order\": {\r\n            \"post\": {\r\n                \"tags\": [\r\n                    \"store\"\r\n                ],\r\n                \"summary\": \"Place an order for a toy\",\r\n                \"description\": \"\",\r\n                \"operationId\": \"placeOrder\",\r\n                \"consumes\": [\r\n                    \"application/json\"\r\n                ],\r\n                \"produces\": [\r\n                    \"application/json\",\r\n                    \"application/xml\"\r\n                ],\r\n                \"parameters\": [\r\n                    {\r\n                        \"in\": \"body\",\r\n                        \"name\": \"body\",\r\n                        \"description\": \"order placed for purchasing the toy\",\r\n                        \"required\": true,\r\n                        \"schema\": {\r\n                            \"$ref\": \"#/definitions/Order\"\r\n                        }\r\n                    }\r\n                ],\r\n                \"responses\": {\r\n                    \"200\": {\r\n                        \"description\": \"successful operation\",\r\n                        \"schema\": {\r\n                            \"$ref\": \"#/definitions/Order\"\r\n                        }\r\n                    },\r\n                    \"400\": {\r\n                        \"description\": \"Invalid Order\"\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \"/store/order/{orderId}\": {\r\n            \"get\": {\r\n                \"tags\": [\r\n                    \"store\"\r\n                ],\r\n                \"summary\": \"Find purchase order by ID\",\r\n                \"description\": \"For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\",\r\n                \"operationId\": \"getOrderById\",\r\n                \"produces\": [\r\n                    \"application/json\",\r\n                    \"application/xml\"\r\n                ],\r\n                \"parameters\": [\r\n                    {\r\n                        \"name\": \"orderId\",\r\n                        \"in\": \"path\",\r\n                        \"description\": \"ID of toy that needs to be fetched\",\r\n                        \"required\": true,\r\n                        \"type\": \"integer\",\r\n                        \"maximum\": 10,\r\n                        \"minimum\": 1,\r\n                        \"format\": \"int64\"\r\n                    }\r\n                ],\r\n                \"responses\": {\r\n                    \"200\": {\r\n                        \"description\": \"successful operation\",\r\n                        \"schema\": {\r\n                            \"$ref\": \"#/definitions/Order\"\r\n                        }\r\n                    },\r\n                    \"400\": {\r\n                        \"description\": \"Invalid ID supplied\"\r\n                    },\r\n                    \"404\": {\r\n                        \"description\": \"Order not found\"\r\n                    }\r\n                }\r\n            },\r\n            \"delete\": {\r\n                \"tags\": [\r\n                    \"store\"\r\n                ],\r\n                \"summary\": \"Delete purchase order by ID\",\r\n                \"description\": \"For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\",\r\n                \"operationId\": \"deleteOrder\",\r\n                \"produces\": [\r\n                    \"application/json\",\r\n                    \"application/xml\"\r\n                ],\r\n                \"parameters\": [\r\n                    {\r\n                        \"name\": \"orderId\",\r\n                        \"in\": \"path\",\r\n                        \"description\": \"ID of the order that needs to be deleted\",\r\n                        \"required\": true,\r\n                        \"type\": \"integer\",\r\n                        \"minimum\": 1,\r\n                        \"format\": \"int64\"\r\n                    }\r\n                ],\r\n                \"responses\": {\r\n                    \"400\": {\r\n                        \"description\": \"Invalid ID supplied\"\r\n                    },\r\n                    \"404\": {\r\n                        \"description\": \"Order not found\"\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \"/store/inventory\": {\r\n            \"get\": {\r\n                \"tags\": [\r\n                    \"store\"\r\n                ],\r\n                \"summary\": \"Returns toy inventories by status\",\r\n                \"description\": \"Returns a map of status codes to quantities\",\r\n                \"operationId\": \"getInventory\",\r\n                \"produces\": [\r\n                    \"application/json\"\r\n                ],\r\n              \r\n                \"responses\": {\r\n                    \"200\": {\r\n                        \"description\": \"successful operation\",\r\n                        \"schema\": {\r\n                            \"type\": \"object\",\r\n                            \"additionalProperties\": {\r\n                                \"type\": \"integer\",\r\n                                \"format\": \"int32\"\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \"/user/createWithArray\": {\r\n            \"post\": {\r\n                \"tags\": [\r\n                    \"user\"\r\n                ],\r\n                \"summary\": \"Creates list of users with given input array\",\r\n                \"description\": \"\",\r\n                \"operationId\": \"createUsersWithArrayInput\",\r\n                \"consumes\": [\r\n                    \"application/json\"\r\n                ],\r\n                \"produces\": [\r\n                    \"application/json\",\r\n                    \"application/xml\"\r\n                ],\r\n                \"parameters\": [\r\n                    {\r\n                        \"in\": \"body\",\r\n                        \"name\": \"body\",\r\n                        \"description\": \"List of user object\",\r\n                        \"required\": true,\r\n                        \"schema\": {\r\n                            \"type\": \"array\",\r\n                            \"items\": {\r\n                                \"$ref\": \"#/definitions/User\"\r\n                            }\r\n                        }\r\n                    }\r\n                ],\r\n                \"responses\": {\r\n                    \"default\": {\r\n                        \"description\": \"successful operation\"\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \"/user/createWithList\": {\r\n            \"post\": {\r\n                \"tags\": [\r\n                    \"user\"\r\n                ],\r\n                \"summary\": \"Creates list of users with given input array\",\r\n                \"description\": \"\",\r\n                \"operationId\": \"createUsersWithListInput\",\r\n                \"consumes\": [\r\n                    \"application/json\"\r\n                ],\r\n                \"produces\": [\r\n                    \"application/json\",\r\n                    \"application/xml\"\r\n                ],\r\n                \"parameters\": [\r\n                    {\r\n                        \"in\": \"body\",\r\n                        \"name\": \"body\",\r\n                        \"description\": \"List of user object\",\r\n                        \"required\": true,\r\n                        \"schema\": {\r\n                            \"type\": \"array\",\r\n                            \"items\": {\r\n                                \"$ref\": \"#/definitions/User\"\r\n                            }\r\n                        }\r\n                    }\r\n                ],\r\n                \"responses\": {\r\n                    \"default\": {\r\n                        \"description\": \"successful operation\"\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \"/user/{username}\": {\r\n            \"get\": {\r\n                \"tags\": [\r\n                    \"user\"\r\n                ],\r\n                \"summary\": \"Get user by user name\",\r\n                \"description\": \"\",\r\n                \"operationId\": \"getUserByName\",\r\n                \"produces\": [\r\n                    \"application/json\",\r\n                    \"application/xml\"\r\n                ],\r\n                \"parameters\": [\r\n                    {\r\n                        \"name\": \"username\",\r\n                        \"in\": \"path\",\r\n                        \"description\": \"The name that needs to be fetched. Use user1 for testing. \",\r\n                        \"required\": true,\r\n                        \"type\": \"string\"\r\n                    }\r\n                ],\r\n                \"responses\": {\r\n                    \"200\": {\r\n                        \"description\": \"successful operation\",\r\n                        \"schema\": {\r\n                            \"$ref\": \"#/definitions/User\"\r\n                        }\r\n                    },\r\n                    \"400\": {\r\n                        \"description\": \"Invalid username supplied\"\r\n                    },\r\n                    \"404\": {\r\n                        \"description\": \"User not found\"\r\n                    }\r\n                }\r\n            },\r\n            \"put\": {\r\n                \"tags\": [\r\n                    \"user\"\r\n                ],\r\n                \"summary\": \"Updated user\",\r\n                \"description\": \"This can only be done by the logged in user.\",\r\n                \"operationId\": \"updateUser\",\r\n                \"consumes\": [\r\n                    \"application/json\"\r\n                ],\r\n                \"produces\": [\r\n                    \"application/json\",\r\n                    \"application/xml\"\r\n                ],\r\n                \"parameters\": [\r\n                    {\r\n                        \"name\": \"username\",\r\n                        \"in\": \"path\",\r\n                        \"description\": \"name that need to be updated\",\r\n                        \"required\": true,\r\n                        \"type\": \"string\"\r\n                    },\r\n                    {\r\n                        \"in\": \"body\",\r\n                        \"name\": \"body\",\r\n                        \"description\": \"Updated user object\",\r\n                        \"required\": true,\r\n                        \"schema\": {\r\n                            \"$ref\": \"#/definitions/User\"\r\n                        }\r\n                    }\r\n                ],\r\n                \"responses\": {\r\n                    \"400\": {\r\n                        \"description\": \"Invalid user supplied\"\r\n                    },\r\n                    \"404\": {\r\n                        \"description\": \"User not found\"\r\n                    }\r\n                }\r\n            },\r\n            \"delete\": {\r\n                \"tags\": [\r\n                    \"user\"\r\n                ],\r\n                \"summary\": \"Delete user\",\r\n                \"description\": \"This can only be done by the logged in user.\",\r\n                \"operationId\": \"deleteUser\",\r\n                \"produces\": [\r\n                    \"application/json\",\r\n                    \"application/xml\"\r\n                ],\r\n                \"parameters\": [\r\n                    {\r\n                        \"name\": \"username\",\r\n                        \"in\": \"path\",\r\n                        \"description\": \"The name that needs to be deleted\",\r\n                        \"required\": true,\r\n                        \"type\": \"string\"\r\n                    }\r\n                ],\r\n                \"responses\": {\r\n                    \"400\": {\r\n                        \"description\": \"Invalid username supplied\"\r\n                    },\r\n                    \"404\": {\r\n                        \"description\": \"User not found\"\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \"/user/login\": {\r\n            \"get\": {\r\n                \"tags\": [\r\n                    \"user\"\r\n                ],\r\n                \"summary\": \"Logs user into the system\",\r\n                \"description\": \"\",\r\n                \"operationId\": \"loginUser\",\r\n                \"produces\": [\r\n                    \"application/json\",\r\n                    \"application/xml\"\r\n                ],\r\n                \"parameters\": [\r\n                    {\r\n                        \"name\": \"username\",\r\n                        \"in\": \"query\",\r\n                        \"description\": \"The user name for login\",\r\n                        \"required\": true,\r\n                        \"type\": \"string\"\r\n                    },\r\n                    {\r\n                        \"name\": \"password\",\r\n                        \"in\": \"query\",\r\n                        \"description\": \"The password for login in clear text\",\r\n                        \"required\": true,\r\n                        \"type\": \"string\"\r\n                    }\r\n                ],\r\n                \"responses\": {\r\n                    \"200\": {\r\n                        \"description\": \"successful operation\",\r\n                        \"headers\": {\r\n                            \"X-Expires-After\": {\r\n                                \"type\": \"string\",\r\n                                \"format\": \"date-time\",\r\n                                \"description\": \"date in UTC when token expires\"\r\n                            },\r\n                            \"X-Rate-Limit\": {\r\n                                \"type\": \"integer\",\r\n                                \"format\": \"int32\",\r\n                                \"description\": \"calls per hour allowed by the user\"\r\n                            }\r\n                        },\r\n                        \"schema\": {\r\n                            \"type\": \"string\"\r\n                        }\r\n                    },\r\n                    \"400\": {\r\n                        \"description\": \"Invalid username/password supplied\"\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \"/user/logout\": {\r\n            \"get\": {\r\n                \"tags\": [\r\n                    \"user\"\r\n                ],\r\n                \"summary\": \"Logs out current logged in user session\",\r\n                \"description\": \"\",\r\n                \"operationId\": \"logoutUser\",\r\n                \"produces\": [\r\n                    \"application/json\",\r\n                    \"application/xml\"\r\n                ],\r\n          \r\n                \"responses\": {\r\n                    \"default\": {\r\n                        \"description\": \"successful operation\"\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \"/user\": {\r\n            \"post\": {\r\n                \"tags\": [\r\n                    \"user\"\r\n                ],\r\n                \"summary\": \"Create user\",\r\n                \"description\": \"This can only be done by the logged in user.\",\r\n                \"operationId\": \"createUser\",\r\n                \"consumes\": [\r\n                    \"application/json\"\r\n                ],\r\n                \"produces\": [\r\n                    \"application/json\",\r\n                    \"application/xml\"\r\n                ],\r\n                \"parameters\": [\r\n                    {\r\n                        \"in\": \"body\",\r\n                        \"name\": \"body\",\r\n                        \"description\": \"Created user object\",\r\n                        \"required\": true,\r\n                        \"schema\": {\r\n                            \"$ref\": \"#/definitions/User\"\r\n                        }\r\n                    }\r\n                ],\r\n                \"responses\": {\r\n                    \"default\": {\r\n                        \"description\": \"successful operation\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"securityDefinitions\": {\r\n        \"api_key\": {\r\n            \"type\": \"apiKey\",\r\n            \"name\": \"api_key\",\r\n            \"in\": \"header\"\r\n        },\r\n        \"LambdaStore_auth\": {\r\n            \"type\": \"oauth2\",\r\n            \"authorizationUrl\": \"https://LambdaStore.swagger.io/oauth/authorize\",\r\n            \"flow\": \"implicit\",\r\n            \"scopes\": {\r\n                \"read:toys\": \"read your toys\",\r\n                \"write:toys\": \"modify toys in your account\"\r\n            }\r\n        }\r\n    },\r\n    \"definitions\": {\r\n        \"ApiResponse\": {\r\n            \"type\": \"object\",\r\n            \"properties\": {\r\n                \"code\": {\r\n                    \"type\": \"integer\",\r\n                    \"format\": \"int32\"\r\n                },\r\n                \"type\": {\r\n                    \"type\": \"string\"\r\n                },\r\n                \"message\": {\r\n                    \"type\": \"string\"\r\n                }\r\n            }\r\n        },\r\n        \"Category\": {\r\n            \"type\": \"object\",\r\n            \"properties\": {\r\n                \"id\": {\r\n                    \"type\": \"integer\",\r\n                    \"format\": \"int64\"\r\n                },\r\n                \"name\": {\r\n                    \"type\": \"string\"\r\n                }\r\n            },\r\n            \"xml\": {\r\n                \"name\": \"Category\"\r\n            }\r\n        },\r\n        \"toy\": {\r\n            \"type\": \"object\",\r\n            \"required\": [\r\n                \"name\",\r\n                \"photoUrls\"\r\n            ],\r\n            \"properties\": {\r\n                \"id\": {\r\n                    \"type\": \"integer\",\r\n                    \"format\": \"int64\"\r\n                },\r\n                \"category\": {\r\n                    \"$ref\": \"#/definitions/Category\"\r\n                },\r\n                \"name\": {\r\n                    \"type\": \"string\",\r\n                    \"example\": \"doggie\"\r\n                },\r\n                \"photoUrls\": {\r\n                    \"type\": \"array\",\r\n                    \"xml\": {\r\n                        \"wrapped\": true\r\n                    },\r\n                    \"items\": {\r\n                        \"type\": \"string\",\r\n                        \"xml\": {\r\n                            \"name\": \"photoUrl\"\r\n                        }\r\n                    }\r\n                },\r\n                \"tags\": {\r\n                    \"type\": \"array\",\r\n                    \"xml\": {\r\n                        \"wrapped\": true\r\n                    },\r\n                    \"items\": {\r\n                        \"xml\": {\r\n                            \"name\": \"tag\"\r\n                        },\r\n                        \"$ref\": \"#/definitions/Tag\"\r\n                    }\r\n                },\r\n                \"status\": {\r\n                    \"type\": \"string\",\r\n                    \"description\": \"toy status in the store\",\r\n                    \"enum\": [\r\n                        \"available\",\r\n                        \"pending\",\r\n                        \"sold\"\r\n                    ]\r\n                }\r\n            },\r\n            \"xml\": {\r\n                \"name\": \"toy\"\r\n            }\r\n        },\r\n        \"Tag\": {\r\n            \"type\": \"object\",\r\n            \"properties\": {\r\n                \"id\": {\r\n                    \"type\": \"integer\",\r\n                    \"format\": \"int64\"\r\n                },\r\n                \"name\": {\r\n                    \"type\": \"string\"\r\n                }\r\n            },\r\n            \"xml\": {\r\n                \"name\": \"Tag\"\r\n            }\r\n        },\r\n        \"Order\": {\r\n            \"type\": \"object\",\r\n            \"properties\": {\r\n                \"id\": {\r\n                    \"type\": \"integer\",\r\n                    \"format\": \"int64\"\r\n                },\r\n                \"toyId\": {\r\n                    \"type\": \"integer\",\r\n                    \"format\": \"int64\"\r\n                },\r\n                \"quantity\": {\r\n                    \"type\": \"integer\",\r\n                    \"format\": \"int32\"\r\n                },\r\n                \"shipDate\": {\r\n                    \"type\": \"string\",\r\n                    \"format\": \"date-time\"\r\n                },\r\n                \"status\": {\r\n                    \"type\": \"string\",\r\n                    \"description\": \"Order Status\",\r\n                    \"enum\": [\r\n                        \"placed\",\r\n                        \"approved\",\r\n                        \"delivered\"\r\n                    ]\r\n                },\r\n                \"complete\": {\r\n                    \"type\": \"boolean\"\r\n                }\r\n            },\r\n            \"xml\": {\r\n                \"name\": \"Order\"\r\n            }\r\n        },\r\n        \"User\": {\r\n            \"type\": \"object\",\r\n            \"properties\": {\r\n                \"id\": {\r\n                    \"type\": \"integer\",\r\n                    \"format\": \"int64\"\r\n                },\r\n                \"username\": {\r\n                    \"type\": \"string\"\r\n                },\r\n                \"firstName\": {\r\n                    \"type\": \"string\"\r\n                },\r\n                \"lastName\": {\r\n                    \"type\": \"string\"\r\n                },\r\n                \"email\": {\r\n                    \"type\": \"string\"\r\n                },\r\n                \"password\": {\r\n                    \"type\": \"string\"\r\n                },\r\n                \"phone\": {\r\n                    \"type\": \"string\"\r\n                },\r\n                \"userStatus\": {\r\n                    \"type\": \"integer\",\r\n                    \"format\": \"int32\",\r\n                    \"description\": \"User Status\"\r\n                }\r\n            },\r\n            \"xml\": {\r\n                \"name\": \"User\"\r\n            }\r\n        }\r\n    },\r\n    \"externalDocs\": {\r\n        \"description\": \"Find out more about Swagger\",\r\n        \"url\": \"http://swagger.io\"\r\n    }\r\n}",
                "path": "lambdaToyStore"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', format('{0}-apim', parameters('prefix')))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/products",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/toyProduct', format('{0}-apim', parameters('prefix')))]",
              "properties": {
                "displayName": "Toy product",
                "description": "Lambda Toys Ordering Product",
                "subscriptionRequired": true,
                "approvalRequired": false,
                "subscriptionsLimit": 1,
                "state": "published"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', format('{0}-apim', parameters('prefix')))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/products/policies",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/{1}/{2}', split(format('{0}/toyProduct', format('{0}-apim', parameters('prefix'))), '/')[0], split(format('{0}/toyProduct', format('{0}-apim', parameters('prefix'))), '/')[1], 'policy')]",
              "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <rate-limit calls=\"5\" renewal-period=\"60\" />\r\n    <quota calls=\"100\" renewal-period=\"604800\" />\r\n    <base />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/products', split(format('{0}/toyProduct', format('{0}-apim', parameters('prefix'))), '/')[0], split(format('{0}/toyProduct', format('{0}-apim', parameters('prefix'))), '/')[1])]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/products/apis",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/{1}/{2}', split(format('{0}/toyProduct', format('{0}-apim', parameters('prefix'))), '/')[0], split(format('{0}/toyProduct', format('{0}-apim', parameters('prefix'))), '/')[1], 'LambdaStore')]",
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', split(format('{0}/LambdaStore', format('{0}-apim', parameters('prefix'))), '/')[0], split(format('{0}/LambdaStore', format('{0}-apim', parameters('prefix'))), '/')[1])]",
                "[resourceId('Microsoft.ApiManagement/service/products', split(format('{0}/toyProduct', format('{0}-apim', parameters('prefix'))), '/')[0], split(format('{0}/toyProduct', format('{0}-apim', parameters('prefix'))), '/')[1])]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-apim-external', parameters('prefix'))]",
              "resourceGroup": "[parameters('externalResourcesRg')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "zoneName": {
                    "value": "lambdatoys.com"
                  },
                  "recordName": {
                    "value": "[format('{0}-apim', parameters('prefix'))]"
                  },
                  "cName": {
                    "value": "[format('{0}-apim.azure-api.net', parameters('prefix'))]"
                  },
                  "managedIdentityId": {
                    "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-apim0-mi', parameters('prefix')))).principalId]"
                  },
                  "keyVaultName": {
                    "value": "[parameters('certKeyVaultName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1124.51302",
                      "templateHash": "15522842590082213572"
                    }
                  },
                  "parameters": {
                    "zoneName": {
                      "type": "string"
                    },
                    "recordName": {
                      "type": "string"
                    },
                    "cName": {
                      "type": "string"
                    },
                    "keyVaultName": {
                      "type": "string"
                    },
                    "managedIdentityId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleIds": [
                      "a4417e6f-fecd-4de8-b567-7b0420556985",
                      "4633458b-17de-408a-b874-0445c86b69e6"
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/dnsZones/CNAME",
                      "apiVersion": "2018-05-01",
                      "name": "[format('{0}/{1}', parameters('zoneName'), parameters('recordName'))]",
                      "properties": {
                        "TTL": 3600,
                        "CNAMERecord": {
                          "cname": "[parameters('cName')]"
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "kvroleAssignment",
                        "count": "[length(variables('roleIds'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-10-01-preview",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                      "name": "[guid(parameters('keyVaultName'), parameters('managedIdentityId'), variables('roleIds')[copyIndex()])]",
                      "properties": {
                        "roleDefinitionId": "[format('/providers/Microsoft.Authorization/roleDefinitions/{0}', variables('roleIds')[copyIndex()])]",
                        "principalId": "[parameters('managedIdentityId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-apim0-mi', parameters('prefix')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'core')]"
      ]
    }
  ]
}